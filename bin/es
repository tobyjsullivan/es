#!/bin/bash

set -e
# set -x

readonly TF_HOME='./.es'

usage() {
  local prog="$0"
  cat <<EOF
usage: ${prog} <command> [parameters]

Some supported commands:

  aws init --state-bucket <bucket-name> --state-key <key-path> [--state-region <region>] --storage-bucket <bucket-name> [--storage-region <region>]
  aws add <local-path>
  aws ls
  aws get <key>
EOF
}

err() {
  echo "$@" >&2
}

run_init() {
  local state_bucket=""
  local state_key=""
  local state_region="us-east-1"
  local storage_bucket=""
  local storage_region="us-east-1"

  while [[ "$#" -gt "0" ]]; do
    case "$1" in
      --state-bucket)
        state_bucket="$2"
        shift
        ;;
      --state-key)
        state_key="$2"
        shift
        ;;
      --state-region)
        state_region="$2"
        shift
        ;;
      --storage-bucket)
        storage_bucket="$2"
        shift
        ;;
      --storage-region)
        storage_region="$2"
        shift
        ;;
      *)
        if [[ "$1" != "" ]]; then
          err "Unrecognized option: $1"
          exit 1
        fi
    esac
    shift
  done

  if [[ "${state_bucket}" = "" ]]; then
    err "You must specify state file bucket with --state-bucket"
    exit 1
  fi

  if [[ "${state_key}" = "" ]]; then
    err "You must specify state file key with --state-key"
    exit 1
  fi

  if [[ "${state_key}" = "" ]]; then
    err "You must storage bucket name with --storage-bucket"
    exit 1
  fi

  local module_dir="$(dirname "$0")/../infra"
  if [[ "${module_dir}" != /* ]]; then
    module_dir="$(pwd)/${module_dir}"
  fi
  mkdir -p "${TF_HOME}"

  # TODO Create a strictly permissioned IAM key and store PGP-encrypted access key
  cat <<EOF > "${TF_HOME}/main.tf"
terraform {
  backend "s3" {
    bucket = "${state_bucket}"
    key = "${state_key}"
    region = "${state_region}"
  }
}

provider "aws" {
  region = "${state_region}"
}

module "es" {
  source = "${module_dir}"
  bucket_name = "${storage_bucket}"
}

output "storage_bucket" {
  value = "\${module.es.s3_bucket}"
}

output "key_id" {
  value = "\${module.es.key_id}"
}
EOF
  cd "${TF_HOME}"
  terraform init
  terraform apply
  cd ..

  # Initialize with an empty mapping file if none exists
  local storage_bucket="$(storage_bucket)"
  if ! s3_file_exists "${storage_bucket}" "mapping.key"; then
    generate_and_push_key "${storage_bucket}" "mapping.key"
    echo "Mapping key initialized."
  fi
  if ! s3_file_exists "${storage_bucket}" "mapping"; then
    true | push_mapping "${storage_bucket}"
    echo "Mapping file initialized."
  fi
}

storage_bucket() {
  cd "${TF_HOME}" && terraform output storage_bucket
}

s3_file_exists() {
  local storage_bucket="$1"
  local file_path="$2"

  aws s3api head-object --bucket "${storage_bucket}" --key "${file_path}" > /dev/null 2> /dev/null
}

gen_data_key() {
  local key_id="$1"

  aws kms generate-data-key  --key-id "${key_id}" --key-spec AES_256 --query CiphertextBlob --output text
}

kms_decrypt() {
  local enc_key_data="$1"

  aws kms decrypt --ciphertext-blob fileb://<(echo "${enc_key_data}" | base64 --decode) --output text --query Plaintext
}

openssl_encrypt() {
  local envelope_key="$1"

  openssl enc -aes256 -e -k "${envelope_key}"
}

openssl_decrypt() {
  local envelope_key="$1"

  openssl enc -aes256 -d -k "${envelope_key}"
}

get_mapping_key() {
  local s3_bucket="$1"

  aws s3 cp "s3://${s3_bucket}/mapping.key" - | base64
}

pull_mapping() {
  local s3_bucket="$1"

  local enc_key_data="$(get_mapping_key "${s3_bucket}")"
  get_and_decrypt_file "${enc_key_data}" "${s3_bucket}" "mapping"
}

push_mapping() {
  local s3_bucket="$1"

  local enc_key_data="$(get_mapping_key "${s3_bucket}")"
  encrypt_and_push_file "${enc_key_data}" "${s3_bucket}" "mapping"
}

random_name() {
  head -c 40 /dev/random | xxd -p -c 40
}

append_mapping() {
  local s3_bucket="$1"
  local friendly_path="$2"
  local s3_file_path="$3"
  local s3_key_path="$4"

  pull_mapping "${s3_bucket}" \
    | (cat && echo "${friendly_path},${s3_file_path},${s3_key_path}") \
    | push_mapping "${s3_bucket}"
}

key_id() {
  cd "${TF_HOME}" && terraform output key_id
}

generate_and_push_key() {
  local s3_bucket="$1"
  local key_s3_path="$2"

  local key_id="$(key_id)"

  local key_s3_url="s3://${s3_bucket}/${key_s3_path}"

  local enc_key_data="$(gen_data_key "${key_id}")"

  echo "${enc_key_data}" | base64 --decode | aws s3 cp - "${key_s3_url}" > /dev/null

  echo "${enc_key_data}"
}

encrypt_and_push_file() {
  local enc_key_data="$1"
  local storage_bucket="$2"
  local file_s3_path="$3"

  local envelope_key="$(kms_decrypt "${enc_key_data}")"
  local file_s3_url="s3://${storage_bucket}/${file_s3_path}"

  openssl_encrypt "${envelope_key}" | aws s3 cp - "${file_s3_url}"
}

get_and_decrypt_file() {
  local enc_key_data="$1"
  local storage_bucket="$2"
  local file_s3_path="$3"

  local envelope_key="$(kms_decrypt "${enc_key_data}")"
  local file_s3_url="s3://${storage_bucket}/${file_s3_path}"
  aws s3 cp "${file_s3_url}" - | openssl_decrypt "${envelope_key}"
}

run_add() {
  if [[ "$#" -ne "1" ]]; then
    err "Invalid number of options"
    usage
    exit 1
  fi

  local file="$1"
  local s3_path="$(random_name)"
  local key_s3_path="$(random_name).key"

  local s3_bucket="$(storage_bucket)"

  local enc_key_data="$(generate_and_push_key "${s3_bucket}" "${key_s3_path}")"
  cat "${file}" | encrypt_and_push_file "${enc_key_data}" "${s3_bucket}" "${s3_path}"
  append_mapping "${s3_bucket}" "${file}" "${s3_path}" "${key_s3_path}"
}

run_ls() {
  pull_mapping "$(storage_bucket)" | while read row; do
    echo "${row}" | cut -d, -f1
  done
}

run_get() {
  # TODO
  echo "and here we'd run get..."
}

run_destroy() {
  cat <<EOF
WARNING: Destroying your configuration will remove AWS resources including your master key and data. This may (but is also not guaranteed to) irreversably destroy all your stored data.

To destroy your es infrastructure:

  aws s3 rm s3://$(storage_bucket) --recursive && cd "${TF_HOME}" && terraform destroy && cd ..
EOF
}

main() {
  if [[ "$#" -lt "1" ]]; then
    err "Invalid usage"
    usage
    exit 1
  fi

  local command="$1"
  shift

  case "${command}" in
    init) run_init "$@";;
    add) run_add "$@";;
    ls) run_ls "$@";;
    get) run_get "$@";;
    destroy) run_destroy "$@";;
    *)
      err "Unsupported command: ${command}"
      usage
      exit 1
      ;;
  esac
}

main "$@"
